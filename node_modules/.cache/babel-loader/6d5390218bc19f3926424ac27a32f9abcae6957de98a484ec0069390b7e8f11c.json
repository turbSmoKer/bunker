{"ast":null,"code":"import _objectSpread from\"C:/bunker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from\"react\";import Card from\"./Card\";import generateRandomAttributes from\"./randomAttributes\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[cards,setCards]=useState(Array.from({length:12},()=>_objectSpread(_objectSpread({id:crypto.randomUUID()},generateRandomAttributes()),{},{revealed:{health:false,profession:false,hobby:false,age:false,phobia:false},playerName:\"\\u0418\\u0433\\u0440\\u043E\\u043A \".concat(Math.floor(Math.random()*100))// Для примера\n})));const toggleReveal=(id,key)=>{setCards(prevCards=>prevCards.map(card=>card.id===id?_objectSpread(_objectSpread({},card),{},{revealed:_objectSpread(_objectSpread({},card.revealed),{},{[key]:!card.revealed[key]})}):card));};const updatePlayerName=(id,newName)=>{setCards(prevCards=>prevCards.map(card=>card.id===id?_objectSpread(_objectSpread({},card),{},{playerName:newName}):card));};const deleteCard=id=>{setCards(prevCards=>prevCards.filter(card=>card.id!==id));};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0418\\u0433\\u0440\\u0430 \\\"\\u0411\\u0443\\u043D\\u043A\\u0435\\u0440\\\"\"}),/*#__PURE__*/_jsx(\"div\",{className:\"cards-container\",children:cards.map(card=>/*#__PURE__*/_jsx(Card,{// Используем уникальный id как ключ\nattributes:card,onToggle:key=>toggleReveal(card.id,key),playerName:card.playerName,onNameChange:newName=>updatePlayerName(card.id,newName),onDelete:()=>deleteCard(card.id)// Передаем id карточки\n},card.id))})]});};export default App;","map":{"version":3,"names":["React","useState","Card","generateRandomAttributes","jsx","_jsx","jsxs","_jsxs","App","cards","setCards","Array","from","length","_objectSpread","id","crypto","randomUUID","revealed","health","profession","hobby","age","phobia","playerName","concat","Math","floor","random","toggleReveal","key","prevCards","map","card","updatePlayerName","newName","deleteCard","filter","className","children","attributes","onToggle","onNameChange","onDelete"],"sources":["C:/bunker/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport generateRandomAttributes from \"./randomAttributes\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [cards, setCards] = useState(\n    Array.from({ length: 12 }, () => ({\n      id: crypto.randomUUID(), // Генерируем уникальный идентификатор\n      ...generateRandomAttributes(),\n      revealed: {\n        health: false,\n        profession: false,\n        hobby: false,\n        age: false,\n        phobia: false,\n      },\n      playerName: `Игрок ${Math.floor(Math.random() * 100)}`, // Для примера\n    }))\n  );\n\n  const toggleReveal = (id, key) => {\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.id === id\n          ? {\n              ...card,\n              revealed: { ...card.revealed, [key]: !card.revealed[key] },\n            }\n          : card\n      )\n    );\n  };\n\n  const updatePlayerName = (id, newName) => {\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.id === id ? { ...card, playerName: newName } : card\n      )\n    );\n  };\n\n  const deleteCard = (id) => {\n    setCards((prevCards) => prevCards.filter((card) => card.id !== id));\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Игра \"Бункер\"</h1>\n      <div className=\"cards-container\">\n        {cards.map((card) => (\n          <Card\n            key={card.id} // Используем уникальный id как ключ\n            attributes={card}\n            onToggle={(key) => toggleReveal(card.id, key)}\n            playerName={card.playerName}\n            onNameChange={(newName) => updatePlayerName(card.id, newName)}\n            onDelete={() => deleteCard(card.id)} // Передаем id карточки\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"8FAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,CAAAC,wBAAwB,KAAM,oBAAoB,CACzD,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAChCU,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,EAAG,CAAC,CAAE,IAAAC,aAAA,CAAAA,aAAA,EACzBC,EAAE,CAAEC,MAAM,CAACC,UAAU,CAAC,CAAC,EACpBd,wBAAwB,CAAC,CAAC,MAC7Be,QAAQ,CAAE,CACRC,MAAM,CAAE,KAAK,CACbC,UAAU,CAAE,KAAK,CACjBC,KAAK,CAAE,KAAK,CACZC,GAAG,CAAE,KAAK,CACVC,MAAM,CAAE,KACV,CAAC,CACDC,UAAU,mCAAAC,MAAA,CAAWC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CAAI;AAAA,EACxD,CACJ,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGA,CAACd,EAAE,CAAEe,GAAG,GAAK,CAChCpB,QAAQ,CAAEqB,SAAS,EACjBA,SAAS,CAACC,GAAG,CAAEC,IAAI,EACjBA,IAAI,CAAClB,EAAE,GAAKA,EAAE,CAAAD,aAAA,CAAAA,aAAA,IAELmB,IAAI,MACPf,QAAQ,CAAAJ,aAAA,CAAAA,aAAA,IAAOmB,IAAI,CAACf,QAAQ,MAAE,CAACY,GAAG,EAAG,CAACG,IAAI,CAACf,QAAQ,CAACY,GAAG,CAAC,EAAE,GAE5DG,IACN,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAGA,CAACnB,EAAE,CAAEoB,OAAO,GAAK,CACxCzB,QAAQ,CAAEqB,SAAS,EACjBA,SAAS,CAACC,GAAG,CAAEC,IAAI,EACjBA,IAAI,CAAClB,EAAE,GAAKA,EAAE,CAAAD,aAAA,CAAAA,aAAA,IAAQmB,IAAI,MAAET,UAAU,CAAEW,OAAO,GAAKF,IACtD,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAG,UAAU,CAAIrB,EAAE,EAAK,CACzBL,QAAQ,CAAEqB,SAAS,EAAKA,SAAS,CAACM,MAAM,CAAEJ,IAAI,EAAKA,IAAI,CAAClB,EAAE,GAAKA,EAAE,CAAC,CAAC,CACrE,CAAC,CAED,mBACER,KAAA,QAAK+B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBlC,IAAA,OAAAkC,QAAA,CAAI,mEAAa,CAAI,CAAC,cACtBlC,IAAA,QAAKiC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAC7B9B,KAAK,CAACuB,GAAG,CAAEC,IAAI,eACd5B,IAAA,CAACH,IAAI,EACW;AACdsC,UAAU,CAAEP,IAAK,CACjBQ,QAAQ,CAAGX,GAAG,EAAKD,YAAY,CAACI,IAAI,CAAClB,EAAE,CAAEe,GAAG,CAAE,CAC9CN,UAAU,CAAES,IAAI,CAACT,UAAW,CAC5BkB,YAAY,CAAGP,OAAO,EAAKD,gBAAgB,CAACD,IAAI,CAAClB,EAAE,CAAEoB,OAAO,CAAE,CAC9DQ,QAAQ,CAAEA,CAAA,GAAMP,UAAU,CAACH,IAAI,CAAClB,EAAE,CAAG;AAAA,EALhCkB,IAAI,CAAClB,EAMX,CACF,CAAC,CACC,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}