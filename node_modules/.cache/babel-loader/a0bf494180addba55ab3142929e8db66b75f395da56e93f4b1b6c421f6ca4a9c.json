{"ast":null,"code":"// randomAttributes.js\n\nconst attributesPool = {\n  health: [\"Отличное\", \"Хорошее\", \"Удовлетворительное\", \"Плохое\"],\n  profession: [\"Врач\", \"Инженер\", \"Учитель\", \"Художник\", \"Повар\", \"Программист\", \"Психолог\", \"Туристический гид\", \"Фотограф\", \"Архитектор\", \"Юрист\", \"Дизайнер\", \"Механик\", \"Стоматолог\", \"Педагог\", \"Музыкант\", \"Секретарь\", \"Журналист\", \"Менеджер\", \"Повар-кондитер\", \"Графический дизайнер\", \"Веб-разработчик\", \"Фармацевт\", \"Терапевт\", \"Физик\", \"Химик\", \"Экономист\", \"Математик\", \"Бухгалтер\", \"Актер\", \"Режиссер\", \"Писатель\", \"Педагог-психолог\", \"Тренер\", \"Логист\", \"Маркетолог\", \"Сварщик\", \"Операционный менеджер\", \"Риелтор\", \"Косметолог\", \"Бариста\", \"Техник\", \"Менеджер по продажам\", \"Кинолог\", \"Лесник\", \"Географ\", \"Историк\", \"Педагог-организатор\", \"Охранник\", \"Животновод\", \"Лаборант\", \"Психотерапевт\", \"Модель\", \"Массажист\", \"Дизайнер интерьеров\", \"Парикмахер\", \"Кондитер\", \"Водитель\", \"Техник по обслуживанию\", \"Специалист по PR\", \"Блогер\", \"Архивист\", \"Гид-переводчик\", \"Эколог\", \"Садовник\", \"Проектировщик\", \"Туроператор\", \"Палевед\", \"Оператор ПК\", \"Редактор\", \"Специалист по кадровым вопросам\", \"Аналитик\", \"Флорист\", \"Курьер\", \"Менеджер по работе с клиентами\", \"Картограф\", \"Генетик\", \"Дерматолог\"],\n  hobby: [\"Рисование\", \"Чтение\", \"Спорт\", \"Музыка\", \"Путешествия\", \"Готовка\"],\n  age: [\"18\", \"20\", \"25\", \"27\", \"30\", \"32\", \"35\", \"40\"],\n  phobia: [\"Замкнутые пространства\", \"Высота\", \"Темнота\", \"Насекомые\", \"Толпа\", \"Одиночество\"]\n};\nlet usedAttributes = {\n  profession: new Set(),\n  hobby: new Set(),\n  age: new Set(),\n  phobia: new Set()\n};\nconst shuffleArray = array => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\nconst generateRandomAttributes = () => {\n  const selectedAttributes = {};\n\n  // Для здоровья выбираем случайное значение без учета предыдущих выборов\n  selectedAttributes.health = shuffleArray(attributesPool.health).pop();\n\n  // Для других атрибутов выбираем случайное значение, исключая уже использованные\n  Object.keys(attributesPool).forEach(key => {\n    if (key !== \"health\") {\n      const availableValues = attributesPool[key].filter(value => !usedAttributes[key].has(value));\n      if (availableValues.length > 0) {\n        const shuffled = shuffleArray(availableValues);\n        const selectedValue = shuffled.pop();\n        selectedAttributes[key] = selectedValue;\n        usedAttributes[key].add(selectedValue); // Помечаем выбранное значение как использованное\n      } else {\n        selectedAttributes[key] = null; // Если все значения использованы, ставим null\n      }\n    }\n  });\n  return selectedAttributes;\n};\nexport default generateRandomAttributes;","map":{"version":3,"names":["attributesPool","health","profession","hobby","age","phobia","usedAttributes","Set","shuffleArray","array","shuffled","i","length","j","Math","floor","random","generateRandomAttributes","selectedAttributes","pop","Object","keys","forEach","key","availableValues","filter","value","has","selectedValue","add"],"sources":["C:/bunker/src/randomAttributes.jsx"],"sourcesContent":["// randomAttributes.js\r\n\r\nconst attributesPool = {\r\n    health: [\"Отличное\", \"Хорошее\", \"Удовлетворительное\", \"Плохое\"],\r\n    profession: [\"Врач\", \"Инженер\", \"Учитель\", \"Художник\", \"Повар\", \"Программист\", \"Психолог\", \"Туристический гид\", \"Фотограф\", \"Архитектор\", \"Юрист\", \"Дизайнер\", \"Механик\", \"Стоматолог\", \"Педагог\", \"Музыкант\", \"Секретарь\", \"Журналист\", \"Менеджер\", \"Повар-кондитер\", \"Графический дизайнер\", \"Веб-разработчик\", \"Фармацевт\", \"Терапевт\", \"Физик\", \"Химик\", \"Экономист\", \"Математик\", \"Бухгалтер\", \"Актер\", \"Режиссер\", \"Писатель\", \"Педагог-психолог\", \"Тренер\", \"Логист\", \"Маркетолог\", \"Сварщик\", \"Операционный менеджер\", \"Риелтор\", \"Косметолог\", \"Бариста\", \"Техник\", \"Менеджер по продажам\", \"Кинолог\", \"Лесник\", \"Географ\", \"Историк\", \"Педагог-организатор\", \"Охранник\", \"Животновод\", \"Лаборант\", \"Психотерапевт\", \"Модель\", \"Массажист\", \"Дизайнер интерьеров\", \"Парикмахер\", \"Кондитер\", \"Водитель\", \"Техник по обслуживанию\", \"Специалист по PR\", \"Блогер\", \"Архивист\", \"Гид-переводчик\", \"Эколог\", \"Садовник\", \"Проектировщик\", \"Туроператор\", \"Палевед\", \"Оператор ПК\", \"Редактор\", \"Специалист по кадровым вопросам\", \"Аналитик\", \"Флорист\", \"Курьер\", \"Менеджер по работе с клиентами\", \"Картограф\", \"Генетик\", \"Дерматолог\"],\r\n    hobby: [\"Рисование\", \"Чтение\", \"Спорт\", \"Музыка\", \"Путешествия\", \"Готовка\"],\r\n    age: [\"18\", \"20\", \"25\", \"27\" , \"30\", \"32\", \"35\", \"40\"],\r\n    phobia: [\"Замкнутые пространства\", \"Высота\", \"Темнота\", \"Насекомые\", \"Толпа\", \"Одиночество\"],\r\n  };\r\n  \r\n  let usedAttributes = {\r\n    profession: new Set(),\r\n    hobby: new Set(),\r\n    age: new Set(),\r\n    phobia: new Set(),\r\n  };\r\n  \r\n  const shuffleArray = (array) => {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n  };\r\n  \r\n  const generateRandomAttributes = () => {\r\n    const selectedAttributes = {};\r\n    \r\n    // Для здоровья выбираем случайное значение без учета предыдущих выборов\r\n    selectedAttributes.health = shuffleArray(attributesPool.health).pop();\r\n    \r\n    // Для других атрибутов выбираем случайное значение, исключая уже использованные\r\n    Object.keys(attributesPool).forEach((key) => {\r\n      if (key !== \"health\") {\r\n        const availableValues = attributesPool[key].filter(value => !usedAttributes[key].has(value));\r\n        if (availableValues.length > 0) {\r\n          const shuffled = shuffleArray(availableValues);\r\n          const selectedValue = shuffled.pop();\r\n          selectedAttributes[key] = selectedValue;\r\n          usedAttributes[key].add(selectedValue); // Помечаем выбранное значение как использованное\r\n        } else {\r\n          selectedAttributes[key] = null; // Если все значения использованы, ставим null\r\n        }\r\n      }\r\n    });\r\n  \r\n    return selectedAttributes;\r\n  };\r\n  \r\n  export default generateRandomAttributes;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}