import React, { useState } from "react";
import Card from "./Card";
import generateRandomAttributes from "./randomAttributes";
import "./App.css";

const catastrophes = [
  "Глобальная пандемия вируса, уничтожившая большинство населения.",
  "Землетрясение разрушает большую часть города.",
  "Ядерная война",
  "Глобальное изменение климата, затопление городов",
  "Метеоритный дождь, разрушивший инфраструктуру",
  "Пожар в крупных городах, уничтожение экосистемы",
  "Глобальная террористическая угроза",
  "Зомби-апокалипсис",
  "Вулканическое извержение",
  "Глобальная экономическая катастрофа",
];

const bunkerLocations = [
  "Под старым заводом",
  "В подземном гараже",
  "В подземной военной базе",
  "В подземной лаборатории",
  "В подземном убежище на ферме",
];

const areas = ["150 кв. м", "200 кв. м", "250 кв. м", "300 кв. м"];
const peoples = ["0", "10", "100", "1000", "10000"];
const timesInBunker = ["1 месяц", "2 месяца", "3 месяца", "4 недели"];
const inventory = [
  "Продукты питания (портятся через 2 недели)",
  "Аптечка",
  "2 пистолета + патроны",
  "Запасы воды и консервов",
  "Оружие",
];

const generateRandomScenario = () => {
  const catastrophe = catastrophes[Math.floor(Math.random() * catastrophes.length)];
  const bunkerLocation = bunkerLocations[Math.floor(Math.random() * bunkerLocations.length)];
  const area = areas[Math.floor(Math.random() * areas.length)];
  const timeInBunker = timesInBunker[Math.floor(Math.random() * timesInBunker.length)];
  const inventoryItems = inventory.sort(() => 0.5 - Math.random()).slice(0, 3);
  const peopl = peoples[Math.floor(Math.random() * peoples.length)];

  return {
    catastrophe,
    bunkerLocation,
    area,
    timeInBunker,
    inventory: inventoryItems,
    peoples: peopl,
  };
};

const App = () => {
  const [scenario, setScenario] = useState(generateRandomScenario());
  const [cards, setCards] = useState(
    Array.from({ length: 12 }, () => ({
      id: crypto.randomUUID(),
      ...generateRandomAttributes(),
      revealed: {
        health: false,
        profession: false,
        hobby: false,
        age: false,
        phobia: false,
      },
      playerName: `Игрок ${Math.floor(Math.random() * 100)}`,
    }))
  );

  const toggleReveal = (id, key) => {
    setCards((prevCards) =>
      prevCards.map((card) =>
        card.id === id
          ? {
              ...card,
              revealed: { ...card.revealed, [key]: !card.revealed[key] },
            }
          : card
      )
    );
  };

  const updatePlayerName = (id, newName) => {
    setCards((prevCards) =>
      prevCards.map((card) =>
        card.id === id ? { ...card, playerName: newName } : card
      )
    );
  };

  const deleteCard = (id) => {
    setCards((prevCards) => prevCards.filter((card) => card.id !== id));
  };

  const regenerateScenario = () => {
    setScenario(generateRandomScenario());
  };

  return (
    <div className="app">
      <div className="header">
        <h1>Игра "Бункер"</h1>
        <button onClick={regenerateScenario} className="regenerate-button">
          Изменить условия
        </button>
      </div>
      <div className="scenario">
        <span><strong>Катастрофа:</strong> {scenario.catastrophe}</span>
        <span><strong>Бункер:</strong> {scenario.bunkerLocation}</span>
        <span><strong>Площадь:</strong> {scenario.area}</span>
        <span><strong>Время в бункере:</strong> {scenario.timeInBunker}</span>
        <span><strong>Осталось людей:</strong> {scenario.peoples}</span>
        <span><strong>Инвентарь:</strong> {scenario.inventory.join(", ")}</span>
      </div>
      <div className="cards-container">
        {cards.map((card) => (
          <Card
            key={card.id}
            attributes={card}
            onToggle={(key) => toggleReveal(card.id, key)}
            playerName={card.playerName}
            onNameChange={(newName) => updatePlayerName(card.id, newName)}
            onDelete={() => deleteCard(card.id)}
          />
        ))}
      </div>
    </div>
  );
};

export default App;
